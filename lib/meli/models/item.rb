=begin
#MELI Markeplace SDK

#This is a the codebase to generate a SDK for Open Platform Marketplace

The version of the OpenAPI document: 3.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'date'

module Meli
  class Item
    attr_accessor :title

    attr_accessor :category_id

    attr_accessor :price

    attr_accessor :currency_id

    attr_accessor :available_quantity

    attr_accessor :buying_mode

    attr_accessor :listing_type_id

    attr_accessor :condition

    attr_accessor :description

    attr_accessor :video_id

    attr_accessor :pictures

    attr_accessor :attributes

    attr_accessor :variations

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'title' => :'title',
        :'category_id' => :'category_id',
        :'price' => :'price',
        :'currency_id' => :'currency_id',
        :'available_quantity' => :'available_quantity',
        :'buying_mode' => :'buying_mode',
        :'listing_type_id' => :'listing_type_id',
        :'condition' => :'condition',
        :'description' => :'description',
        :'video_id' => :'video_id',
        :'pictures' => :'pictures',
        :'attributes' => :'attributes',
        :'variations' => :'variations'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'title' => :'String',
        :'category_id' => :'String',
        :'price' => :'Integer',
        :'currency_id' => :'String',
        :'available_quantity' => :'String',
        :'buying_mode' => :'String',
        :'listing_type_id' => :'String',
        :'condition' => :'String',
        :'description' => :'String',
        :'video_id' => :'String',
        :'pictures' => :'Array<ItemPictures>',
        :'attributes' => :'Array<Attributes>',
        :'variations' => :'Array<Variations>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Meli::Item` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Meli::Item`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'category_id')
        self.category_id = attributes[:'category_id']
      end

      if attributes.key?(:'price')
        self.price = attributes[:'price']
      end

      if attributes.key?(:'currency_id')
        self.currency_id = attributes[:'currency_id']
      end

      if attributes.key?(:'available_quantity')
        self.available_quantity = attributes[:'available_quantity']
      end

      if attributes.key?(:'buying_mode')
        self.buying_mode = attributes[:'buying_mode']
      end

      if attributes.key?(:'listing_type_id')
        self.listing_type_id = attributes[:'listing_type_id']
      end

      if attributes.key?(:'condition')
        self.condition = attributes[:'condition']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'video_id')
        self.video_id = attributes[:'video_id']
      end

      if attributes.key?(:'pictures')
        if (value = attributes[:'pictures']).is_a?(Array)
          self.pictures = value
        end
      end

      if attributes.key?(:'attributes')
        if (value = attributes[:'attributes']).is_a?(Array)
          self.attributes = value
        end
      end

      if attributes.key?(:'variations')
        if (value = attributes[:'variations']).is_a?(Array)
          self.variations = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @title.nil?
        invalid_properties.push('invalid value for "title", title cannot be nil.')
      end

      if @category_id.nil?
        invalid_properties.push('invalid value for "category_id", category_id cannot be nil.')
      end

      if @price.nil?
        invalid_properties.push('invalid value for "price", price cannot be nil.')
      end

      if @currency_id.nil?
        invalid_properties.push('invalid value for "currency_id", currency_id cannot be nil.')
      end

      if @available_quantity.nil?
        invalid_properties.push('invalid value for "available_quantity", available_quantity cannot be nil.')
      end

      if @buying_mode.nil?
        invalid_properties.push('invalid value for "buying_mode", buying_mode cannot be nil.')
      end

      if @listing_type_id.nil?
        invalid_properties.push('invalid value for "listing_type_id", listing_type_id cannot be nil.')
      end

      if @condition.nil?
        invalid_properties.push('invalid value for "condition", condition cannot be nil.')
      end

      if @description.nil?
        invalid_properties.push('invalid value for "description", description cannot be nil.')
      end

      if @video_id.nil?
        invalid_properties.push('invalid value for "video_id", video_id cannot be nil.')
      end

      if @pictures.nil?
        invalid_properties.push('invalid value for "pictures", pictures cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @title.nil?
      return false if @category_id.nil?
      return false if @price.nil?
      return false if @currency_id.nil?
      return false if @available_quantity.nil?
      return false if @buying_mode.nil?
      return false if @listing_type_id.nil?
      return false if @condition.nil?
      return false if @description.nil?
      return false if @video_id.nil?
      return false if @pictures.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          title == o.title &&
          category_id == o.category_id &&
          price == o.price &&
          currency_id == o.currency_id &&
          available_quantity == o.available_quantity &&
          buying_mode == o.buying_mode &&
          listing_type_id == o.listing_type_id &&
          condition == o.condition &&
          description == o.description &&
          video_id == o.video_id &&
          pictures == o.pictures &&
          attributes == o.attributes &&
          variations == o.variations
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [title, category_id, price, currency_id, available_quantity, buying_mode, listing_type_id, condition, description, video_id, pictures, attributes, variations].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        Meli.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
